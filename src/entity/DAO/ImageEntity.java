/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package entity.DAO;

import java.awt.image.BufferedImage;
import java.io.Serializable;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.imageio.ImageIO;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author generated by haipn
 */
public class ImageEntity implements Serializable {

    public int id;
    public String userId;
    public String src;
    public int type;
    public String des;
    public String hashtag;
    public long timestamp;
    public int width;
    public int height;
    public float ratio;

    public ImageEntity(int id, String userId,
            String src, int type, String des, String hashtag, long timestamp,
            int width, int height, float ratio) {
        this.id = id;
        this.userId = userId;
        this.src = src;
        this.type = type;
        this.des = des;
        this.hashtag = hashtag;
        this.timestamp = timestamp;
        this.width = width;
        this.height = height;
        this.ratio = ratio;
    }

    public void updateSize() {
        try {
            URL url = new URL(src);
            BufferedImage image = ImageIO.read(url);
            height = image.getHeight();
            width = image.getWidth();
            ratio = 1.0f * height / width;
        } catch (Exception ex) {
            System.err.println(ex);
        }
    }

    public boolean isValidImg() {
        return height != 0 && width != 0 && ratio != 0;
    }

    public ImageEntity(ResultSet rs) {
        try {
            this.id = rs.getInt("id");
            this.userId = rs.getString("user_id");
            this.src = rs.getString("src");
            this.type = rs.getInt("type");
            this.des = rs.getString("des");
            this.hashtag = rs.getString("hashtag");
            this.timestamp = rs.getLong("timestamp");
            this.width = rs.getInt("width");
            this.height = rs.getInt("height");
            this.ratio = rs.getFloat("ratio");

        } catch (SQLException ex) {
        }
    }

    public int setParameters(PreparedStatement stmt, int idx) {
        try {
            if (stmt == null) {
                return idx;
            }
            stmt.setString(idx++, userId);
            stmt.setString(idx++, src);
            stmt.setInt(idx++, type);
            stmt.setString(idx++, des);
            stmt.setString(idx++, hashtag);
            stmt.setLong(idx++, timestamp);
            stmt.setInt(idx++, width);
            stmt.setInt(idx++, height);
            stmt.setFloat(idx++, ratio);

        } catch (SQLException ex) {
        }
        return idx;
    }

    public int setPrimaryKeyParameters(PreparedStatement stmt, int idx) {
        try {
            if (stmt == null) {
                return idx;
            }
            stmt.setInt(idx++, id);

        } catch (SQLException ex) {
        }
        return idx;
    }

    public int setParametersForUpdate(PreparedStatement stmt, int idx) {
        try {
            if (stmt == null) {
                return idx;
            }
            stmt.setString(idx++, userId);
            stmt.setString(idx++, src);
            stmt.setInt(idx++, type);
            stmt.setString(idx++, des);
            stmt.setString(idx++, hashtag);
            stmt.setLong(idx++, timestamp);
            stmt.setInt(idx++, width);
            stmt.setInt(idx++, height);
            stmt.setFloat(idx++, ratio);
            stmt.setInt(idx++, id);

        } catch (SQLException ex) {
        }
        return idx;
    }

    @Override
    public String toString() {
        JSONObject jo = new JSONObject();
        try {
            jo.put("id", id);
            jo.put("user_id", userId);
            jo.put("src", src);
            jo.put("type", type);
            jo.put("des", des);
            jo.put("hashtag", hashtag);
            jo.put("timestamp", timestamp);
            jo.put("width", width);
            jo.put("height", height);
            jo.put("ratio", ratio);
        } catch (JSONException ex) {
//            Logger.getLogger(ImageEntity.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jo.toString();
    }
    
    public static ImageEntity fromJSON(String str) {
        try {
            JSONObject jo = new JSONObject(str);
            int id = jo.getInt("id");
            String userId = jo.getString("user_id");
            String src = jo.getString("src");
            int type = jo.getInt("type");
            String des = jo.getString("des");
            String hashtag = jo.getString("hashtag");
            long timestamp = jo.getLong("timestamp");
            int width = jo.getInt("width");
            int height = jo.getInt("height");
            float ratio = (float) jo.getDouble("ratio");
            return new ImageEntity(id, userId, src, type, des, hashtag, timestamp, width, height, ratio);
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return null;
    }
}
