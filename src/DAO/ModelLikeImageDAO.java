/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DAO;

import entity.DAO.LikeImageEntity;
import entity.db.DbConnectorEntity;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.LinkedList;
import utils.Config;

/**
 *
 * @author generated by haipn
 */
public class ModelLikeImageDAO {

    private static ModelLikeImageDAO _instance = null;

    private static final String TABLE_NAME = "like_image_table";
    private static final String[] TABLE_PRIMARY_KEYS = {"user_id", "image_id"};
    private static final String[] TABLE_NORMAL_COLS = {"action", "timestamp"};
    private static final String[] TABLE_COLS = {"user_id", "image_id", "action", "timestamp"};

    private final DbConnector _connector;

    private ModelLikeImageDAO() {
        _connector = new SQLiteDAO(Config.getParam("sqlite", "raw_data"));
    }

    public static ModelLikeImageDAO getInstance() {
        if (_instance == null) {
            _instance = new ModelLikeImageDAO();
        }
        return _instance;
    }

    public int insert(LikeImageEntity entity) {
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return -1;
            }
            String sql = BuildQueryString.buildInsertQueryFullCollumns(TABLE_NAME, TABLE_COLS, 1);
            ce.stmt = ce.conn.prepareStatement(sql);
            int idx = 1;
            entity.setParameters(ce.stmt, idx);
            return ce.stmt.executeUpdate();
//            conn.commit();
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return -1;
    }

    public int update(LikeImageEntity entity) {
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return -1;
            }
            String sql = BuildQueryString.buildUpdateQuery(TABLE_NAME, TABLE_PRIMARY_KEYS, TABLE_NORMAL_COLS);
            ce.stmt = ce.conn.prepareStatement(sql);
            int idx = 1;
            entity.setParametersForUpdate(ce.stmt, idx);
            return ce.stmt.executeUpdate();
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return -1;
    }

    public int delete(LikeImageEntity entity) {
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return -1;
            }
            String sql = BuildQueryString.buildDeleteQuery(TABLE_NAME, TABLE_PRIMARY_KEYS);
            ce.stmt = ce.conn.prepareStatement(sql);
            int idx = 1;
            entity.setPrimaryKeyParameters(ce.stmt, idx);
            return ce.stmt.executeUpdate();
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return -1;
    }

    public int delete(int id) {
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return -1;
            }
            String sql = BuildQueryString.buildDeleteQuery(TABLE_NAME, "image_id");
            ce.stmt = ce.conn.prepareStatement(sql);
            int idx = 1;
            ce.stmt.setInt(idx++, id);
            return ce.stmt.executeUpdate();
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return -1;
    }
    
    public Collection<LikeImageEntity> getEntities(String select, String where, String groupBy, String having, String orderBy, int limit) {
        Collection<LikeImageEntity> res = new LinkedList<>();
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return res;
            }
            String sql = BuildQueryString.buildSelectQuery(TABLE_NAME, select, where, groupBy, having, orderBy, limit);
            ce.stmt = ce.conn.prepareStatement(sql);
            ResultSet rs = ce.executeQuery();
//            conn.commit();
            while (rs.next()) {
                LikeImageEntity entity = new LikeImageEntity(rs);
                res.add(entity);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return res;
    }

    public LikeImageEntity getEntity(LikeImageEntity entity) {
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return null;
            }
            String sql = BuildQueryString.buildSelectByKeyQuery(TABLE_NAME, TABLE_PRIMARY_KEYS);
            ce.stmt = ce.conn.prepareStatement(sql);
            int idx = 1;
            entity.setPrimaryKeyParameters(ce.stmt, idx);
            ResultSet rs = ce.executeQuery();
//            conn.commit();
            if (rs.next()) {
                return new LikeImageEntity(rs);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return null;
    }

    public static void main(String[] args) {
//        ImageEntity imageEntity = new ImageEntity(0, "phannghiemhai", 
//                "https://scontent.fsgn2-2.fna.fbcdn.net/v/t1.0-9/18424212_1385372334886861_3572322844774159264_n.jpg?oh=64b35fb26d65950e35d5a7009eca2799&oe=5A02DF75", 
//                0, "", "", 0, 0, 0, 0);
        LikeImageEntity imageEntity = new LikeImageEntity("haipn@vng.com.vn", 10, 1, System.currentTimeMillis());
        int id = getInstance().insert(imageEntity);
        System.out.println(id);
        Collection<LikeImageEntity> entities = getInstance().getEntities(null, null, null, null, null, 0);
        for (LikeImageEntity entity : entities) {
            System.out.println(entity.userId + " " + entity.imageId + " " + entity.action + " " + entity.timestamp);
        }
    }
}
