/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model;

import DAO.ModelLikeImageDAO;
import entity.DAO.ImageEntity;
import entity.DAO.LikeImageEntity;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import queue.QueueManager;
import queue.cmd.db.LikeImageCmd;
import utils.Configuration;

/**
 *
 * @author generated by haipn
 */
public class ModelLikeImage {

    private static ModelLikeImage _instance = null;
    private Map<String, Set<Integer>> _userEmail2SetImgId;
    private Map<Integer, Set<String>> _imgId2SetEmail;

    private ModelLikeImage() {
        _userEmail2SetImgId = new HashMap<>();
        _imgId2SetEmail = new HashMap<>();
        Collection<LikeImageEntity> entities = ModelLikeImageDAO.getInstance()
                .getEntities(null, null, null, null, null, 0);
        for (LikeImageEntity entity : entities) {
            if (entity.action == 0) {
                continue;
            }
            Set<Integer> s = null;
            if (_userEmail2SetImgId.containsKey(entity.userId)) {
                s = _userEmail2SetImgId.get(entity.userId);
            } else {
                s = new HashSet<>();
                _userEmail2SetImgId.put(entity.userId, s);
            }
            s.add(entity.imageId);
            
            Set<String> sE = null;
            if (_imgId2SetEmail.containsKey(entity.imageId)) {
                sE = _imgId2SetEmail.get(entity.imageId);
            } else {
                sE = new HashSet<>();
                _imgId2SetEmail.put(entity.imageId, sE);
            }
            sE.add(entity.userId);
        }
    }

    public static ModelLikeImage getInstance() {
        if (_instance == null) {
            _instance = new ModelLikeImage();
        }
        return _instance;
    }

    public int update(Set<Integer> s, Set<String> sE, String userId, int imageId) {
        int res;
        LikeImageCmd cmd = null;
        if (s.contains(imageId)) {
            s.remove(imageId);
            sE.remove(userId);
            cmd = new LikeImageCmd(new LikeImageEntity(userId, imageId, 0, 0), 
                    LikeImageCmd.TYPES.DELETE);
            res = 0;
        } else {
            s.add(imageId);
            sE.add(userId);
            cmd = new LikeImageCmd(new LikeImageEntity(userId, imageId, 1, System.currentTimeMillis()), 
                    LikeImageCmd.TYPES.INSERT);
            res = 1;
        }
        QueueManager.getInstance(Configuration.CmdQueue.QUEUE_NAME).put(cmd);
        return res;
    }

    public Set<Integer> getEntities(String usermail) {
        Set<Integer> res = null;
        if (_userEmail2SetImgId.containsKey(usermail)) {
            res = _userEmail2SetImgId.get(usermail);
        } else {
            res = new HashSet<>();
            _userEmail2SetImgId.put(usermail, res);
        }
        return res;
    }
    
    public Set<String> getEntities(int imageId) {
        Set<String> res = null;
        if (_imgId2SetEmail.containsKey(imageId)) {
            res = _imgId2SetEmail.get(imageId);
        } else {
            res = new HashSet<>();
            _imgId2SetEmail.put(imageId, res);
        }
        return res;
    }

    public ImageEntity getEntity(ImageEntity entity) {

        return null;
    }

    public static void main(String[] args) {
    }

    public void delete(ImageEntity entity) {
        _imgId2SetEmail.remove(entity.id);
        if (_userEmail2SetImgId.containsKey(entity.userId)) {
            _userEmail2SetImgId.get(entity.userId).remove(entity.id);
            LikeImageCmd cmd = new LikeImageCmd(new LikeImageEntity("", entity.id, 0, 0), 
                    LikeImageCmd.TYPES.DELETE_BY_ID);
        }
    }
}
