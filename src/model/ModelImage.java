/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model;

import DAO.*;
import entity.DAO.ImageEntity;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import queue.QueueManager;
import queue.cmd.db.ImageCmd;
import utils.Configuration;
import utils.Constants;
import utils.RedisKey;

/**
 *
 * @author generated by haipn
 */
public class ModelImage {

    private static ModelImage _instance = null;
    private int _seq;

    private ModelImage() {
        _seq = ModelImageDAO.getInstance().getSeq();
    }

    public static ModelImage getInstance() {
        if (_instance == null) {
            _instance = new ModelImage();
        }
        return _instance;
    }

    private String getListImagesKey() {
        return RedisKey.Image.listImagesKey;
    }

    private String getListImagesByUserIdKey(String userId) {
        return String.format(RedisKey.Image.listImagesByUserIdKey, userId);
    }

    private String getImageEntityKey(int imageId) {
        return String.format(RedisKey.Image.imageEntityKey, imageId);
    }

    private String getImageSeq() {
        return RedisKey.Image.imageSeq;
    }

    public int insert(ImageEntity entity) {
        if (entity.isValidImg()) {
            entity.id = ++_seq;

            String imageEntityKey = getImageEntityKey(entity.id);
            ModelRedis.getInstance().set(imageEntityKey, entity.toString());
            ModelRedis.getInstance().expire(imageEntityKey, RedisKey.Image.DEFAUT_EXPIRE_TIME);

            String listImagesKey = getListImagesKey();
            if (!ModelRedis.getInstance().exists(listImagesKey)) {
                getEntities(1, Constants.Gallery.itemPerPage);
            }
            ModelRedis.getInstance().lpush(listImagesKey, String.valueOf(entity.id));
            ModelRedis.getInstance().expire(listImagesKey, RedisKey.Image.DEFAUT_EXPIRE_TIME);

            String listImagesByUserIdKey = getListImagesByUserIdKey(entity.userId);
            if (!ModelRedis.getInstance().exists(listImagesByUserIdKey)) {
                getEntities(entity.userId, 1, Constants.Gallery.itemPerPage);
            }
            ModelRedis.getInstance().lpush(listImagesByUserIdKey, String.valueOf(entity.id));
            ModelRedis.getInstance().expire(listImagesByUserIdKey, RedisKey.Image.DEFAUT_EXPIRE_TIME);

            ImageCmd cmd = new ImageCmd(entity, ImageCmd.TYPES.INSERT);
            QueueManager.getInstance(Configuration.CmdQueue.QUEUE_NAME).put(cmd);
            return 1;
        }
        return -1;
    }

    public int update(ImageEntity entity) {
        if (entity.id > 0) {
            String imageEntityKey = getImageEntityKey(entity.id);
            ModelRedis.getInstance().set(imageEntityKey, entity.toString());
            ModelRedis.getInstance().expire(imageEntityKey, RedisKey.Image.DEFAUT_EXPIRE_TIME);
            ImageCmd cmd = new ImageCmd(entity, ImageCmd.TYPES.UPDATE);
            QueueManager.getInstance(Configuration.CmdQueue.QUEUE_NAME).put(cmd);
            return 1;
        }
        return -1;
    }

    public int delete(ImageEntity entity) {
        if (entity.id > 0) {
            ModelRedis.getInstance().lrem(getListImagesKey(), 1, String.valueOf(entity.id));
            ModelRedis.getInstance().lrem(getListImagesByUserIdKey(entity.userId), 1, String.valueOf(entity.id));
            ModelRedis.getInstance().del(getImageEntityKey(entity.id));
            ImageCmd cmd = new ImageCmd(entity, ImageCmd.TYPES.DELETE);
            QueueManager.getInstance(Configuration.CmdQueue.QUEUE_NAME).put(cmd);
            return 1;
        }
        return -1;
    }

    public List<ImageEntity> getEntities(int page, int itemsPerPage) {
        ArrayList<ImageEntity> res = new ArrayList<>();
        if (page <= 0) {
            return res;
        }
        String listImagesKey = getListImagesKey();
        if (!ModelRedis.getInstance().exists(listImagesKey)) {
            Collection<ImageEntity> entities = ModelImageDAO.getInstance()
                    .getEntities(null, null, null, null, "id DESC", 0);
            for (ImageEntity entity : entities) {
                String imageEntityKey = getImageEntityKey(entity.id);
                ModelRedis.getInstance().rpush(listImagesKey, String.valueOf(entity.id));
                ModelRedis.getInstance().expire(listImagesKey, RedisKey.Image.DEFAUT_EXPIRE_TIME);
                if (res.size() < itemsPerPage) {
                    res.add(entity);
                    if (!ModelRedis.getInstance().exists(imageEntityKey)) {
                        ModelRedis.getInstance().set(imageEntityKey, entity.toString());
                        ModelRedis.getInstance().expire(imageEntityKey, RedisKey.Image.DEFAUT_EXPIRE_TIME);
                    }
                }
            }
        } else {
            List<String> ids = ModelRedis.getInstance().lrange(listImagesKey, (page - 1) * (itemsPerPage), page * itemsPerPage - 1);
            for (String idStr : ids) {
                int id = Integer.valueOf(idStr);
                ImageEntity entity = getEntity(id);
                res.add(entity);
            }
        }
        return res;
    }

    public List<ImageEntity> getEntities(String userId, int page, int itemsPerPage) {
        ArrayList<ImageEntity> res = new ArrayList<>();
        if (page <= 0) {
            return res;
        }
        String listImagesByUserIdKey = getListImagesByUserIdKey(userId);
        if (!ModelRedis.getInstance().exists(listImagesByUserIdKey)) {
            Collection<ImageEntity> entities = ModelImageDAO.getInstance()
                    .getEntities(null, "user_id = '" + userId + "'", null, null, "id DESC", 0);
            for (ImageEntity entity : entities) {
                String imageEntityKey = getImageEntityKey(entity.id);
                ModelRedis.getInstance().rpush(listImagesByUserIdKey, String.valueOf(entity.id));
                ModelRedis.getInstance().expire(listImagesByUserIdKey, RedisKey.Image.DEFAUT_EXPIRE_TIME);
                if (res.size() < itemsPerPage) {
                    res.add(entity);
                    if (!ModelRedis.getInstance().exists(imageEntityKey)) {
                        ModelRedis.getInstance().set(imageEntityKey, entity.toString());
                        ModelRedis.getInstance().expire(imageEntityKey, RedisKey.Image.DEFAUT_EXPIRE_TIME);
                    }
                }
            }
        } else {
            List<String> ids = ModelRedis.getInstance().lrange(listImagesByUserIdKey, (page - 1) * (itemsPerPage), page * itemsPerPage - 1);
            for (String idStr : ids) {
                int id = Integer.valueOf(idStr);
                ImageEntity entity = getEntity(id);
                res.add(entity);
            }
        }
        return res;
    }

    public ImageEntity getEntity(int id) {
        String imageEntityKey = getImageEntityKey(id);
        if (ModelRedis.getInstance().exists(imageEntityKey)) {
            String str = ModelRedis.getInstance().get(imageEntityKey);
            return ImageEntity.fromJSON(str);
        } else {
            ImageEntity entity = ModelImageDAO.getInstance().getEntity(id);
            if (entity != null) {
                ModelRedis.getInstance().set(imageEntityKey, entity.toString());
                ModelRedis.getInstance().expire(imageEntityKey, RedisKey.Image.DEFAUT_EXPIRE_TIME);
                return entity;
            }
        }
        return null;
    }

    public static void main(String[] args) {
        Collection<ImageEntity> entities = getInstance().getEntities(1, Integer.MAX_VALUE);
        for (ImageEntity entity : entities) {
            System.out.println(entity.ratio);
        }
    }
}
