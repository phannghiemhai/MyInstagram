/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model;

import java.util.List;
import java.util.Set;
import org.apache.commons.lang.StringUtils;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.exceptions.JedisConnectionException;
import utils.Config;

/**
 *
 * @author generated by haipn
 */
public class ModelRedis {

    private static ModelRedis _instance = null;
    private static String _host = Config.getParam("redis", "host");
    private static int _port = Config.getParamInt("redis", "port");
    private static JedisPool _poolInst;

    private ModelRedis() {
        try {
            _poolInst = new JedisPool(_host, _port);
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    public static ModelRedis getInstance() {
        if (_instance == null) {
            _instance = new ModelRedis();
        }
        return _instance;
    }

    public Set<String> keys(String keypattern) {
        Set<String> ret = null;
        try {
            if (StringUtils.isEmpty(keypattern)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.keys(keypattern);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public Set<String> smembers(String key) {
        Set<String> ret = null;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.smembers(key);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public long sadd(String key, String... members) {
        long ret = -1;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.sadd(key, members);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public long lpush(String key, String... members) {
        long ret = -1;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.lpush(key, members);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public long rpush(String key, String... members) {
        long ret = -1;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.rpush(key, members);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public String lpop(String key) {
        String ret = null;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.lpop(key);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public String rpop(String key) {
        String ret = null;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.lpop(key);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }
    
    public List<String> lrange(String key, int start, int end) {
        List<String> ret = null;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.lrange(key, start, end);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public long lrem(String key, long count, String value) {
        long ret = -1;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.lrem(key, count, value);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public String set(String key, String value) {
        String ret = null;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.set(key, value);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public long tll(String key) {
        long ret = -1;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.ttl(key);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public long expire(String key, int seconds) {
        long ret = -1;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.expire(key, seconds);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public boolean exists(String key) {
        boolean ret = false;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.exists(key);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public String get(String key) {
        String ret = null;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.get(key);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

    public long del(String key) {
        long ret = -1;
        try {
            if (StringUtils.isEmpty(key)) {
                return ret;
            }

            Jedis jedis = _poolInst.getResource();
            try {
                ret = jedis.del(key);
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            } catch (JedisConnectionException e) {
                if (jedis != null) {
                    _poolInst.returnBrokenResource(jedis);
                    jedis = null;
                }
                if (jedis != null) {
                    _poolInst.returnResource(jedis);
                }
            }
        } catch (Exception ex) {
//            _log.error("ModelRedis insertSet : " + ex.getMessage(), ex);
        }
        return ret;
    }

}
