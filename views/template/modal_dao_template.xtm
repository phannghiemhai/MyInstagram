/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DAO;

import entity.DAO.{{entity_class_name}};
import entity.db.DbConnectorEntity;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.LinkedList;
import utils.Config;

/**
 *
 * @author generated by haipn
 */
public class {{modal_class_name}} {

    private static {{modal_class_name}} _instance = null;

    private static final String TABLE_NAME = "{{table_name}}";
    private static final String[] TABLE_PRIMARY_KEYS = {"{{first_primary_key}}"{{#primary_key}}, "{{name}}"{{/primary_key}}};
    private static final String[] TABLE_NORMAL_COLS = {"{{first_normal_key}}"{{#normal_key}}, "{{name}}"{{/normal_key}}};
    private static final String[] TABLE_COLS = {"{{first_table_col}}"{{#table_col}}, "{{name}}"{{/table_col}}};

    private final DbConnector _connector;

    private {{modal_class_name}}() {
        _connector = new SQLiteDAO(Config.getParam("sqlite", "raw_data"));
    }

    public static {{modal_class_name}} getInstance() {
        if (_instance == null) {
            _instance = new {{modal_class_name}}();
        }
        return _instance;
    }

    public int insert({{entity_class_name}} entity) {
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return -1;
            }
            String sql = BuildQueryString.buildInsertQuery(TABLE_NAME, TABLE_COLS, 1);
            ce.stmt = ce.conn.prepareStatement(sql);
            int idx = 1;
            entity.setParameters(ce.stmt, idx);
            return ce.stmt.executeUpdate();
//            conn.commit();
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return -1;
    }

    public int update({{entity_class_name}} entity) {
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return -1;
            }
            String sql = BuildQueryString.buildUpdateQuery(TABLE_NAME, TABLE_PRIMARY_KEYS, TABLE_NORMAL_COLS);
            ce.stmt = ce.conn.prepareStatement(sql);
            int idx = 1;
            entity.setParametersForUpdate(ce.stmt, idx);
            return ce.stmt.executeUpdate();
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return -1;
    }

    public int delete({{entity_class_name}} entity) {
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return -1;
            }
            String sql = BuildQueryString.buildDeleteQuery(TABLE_NAME, TABLE_PRIMARY_KEYS);
            ce.stmt = ce.conn.prepareStatement(sql);
            int idx = 1;
            entity.setPrimaryKeyParameters(ce.stmt, idx);
            return ce.stmt.executeUpdate();
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return -1;
    }

    public Collection<{{entity_class_name}}> getEntities(String select, String where, String groupBy, String having, String orderBy, int limit) {
        Collection<{{entity_class_name}}> res = new LinkedList<>();
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return res;
            }
            String sql = BuildQueryString.buildSelectQuery(TABLE_NAME, select, where, groupBy, having, orderBy, limit);
            ce.stmt = ce.conn.prepareStatement(sql);
            ResultSet rs = ce.executeQuery();
//            conn.commit();
            while (rs.next()) {
                {{entity_class_name}} entity = new {{entity_class_name}}(rs);
                res.add(entity);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return res;
    }

    public {{entity_class_name}} getEntity({{entity_class_name}} entity) {
        DbConnectorEntity ce = new DbConnectorEntity();
        try {
            if (!_connector.openConnection(ce)) {
                return null;
            }
            String sql = BuildQueryString.buildSelectByKeyQuery(TABLE_NAME, TABLE_PRIMARY_KEYS);
            ce.stmt = ce.conn.prepareStatement(sql);
            int idx = 1;
            entity.setPrimaryKeyParameters(ce.stmt, idx);
            ResultSet rs = ce.executeQuery();
//            conn.commit();
            if (rs.next()) {
                return new {{entity_class_name}}(rs);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        } finally {
            _connector.closeConnection(ce);
        }
        return null;
    }

    public static void main(String[] args) {
        Collection<{{entity_class_name}}> entities = getInstance().getEntities(null, null, null, null, null, 0);
        for({{entity_class_name}} entity : entities) {
            System.out.println(entity);
        }
    }
}
